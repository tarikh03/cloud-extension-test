{
    "levels": [
        {
            "stages": [
                {
                    "name": "Flow inputs",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "StatementValues",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {}
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "StatementCols",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {}
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "WhereClause",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Cols and values",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "SplitColsAndVals",
                            "actorType": {
                                "parentType": "Split",
                                "inputs": [
                                    {
                                        "name": "delimiter",
                                        "const": "="
                                    }
                                ],
                                "outputs": []
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Stage 2",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "Value ",
                            "actorType": {
                                "parentType": "JavaScript",
                                "inputs": [
                                    {
                                        "name": "script",
                                        "const": "arr[1].trim();"
                                    },
                                    {
                                        "name": "arr",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "mandatory": false
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "result",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "Column",
                            "actorType": {
                                "parentType": "JavaScript",
                                "inputs": [
                                    {
                                        "name": "script",
                                        "const": "arr[0].trim().toUpperCase();"
                                    },
                                    {
                                        "name": "arr",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "mandatory": false
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "result",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Check if value is string ",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "CheckIfString",
                            "actorType": {
                                "parentType": "Regex",
                                "inputs": [
                                    {
                                        "name": "pattern",
                                        "const": "^'([^']+)'$"
                                    }
                                ],
                                "outputs": []
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Value is string",
                    "dependsOnList": [
                        "Check if value is string "
                    ],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "IsString",
                            "condition": "result",
                            "actorType": {
                                "parentType": "NotNull",
                                "inputs": [],
                                "outputs": []
                            }
                        },
                        {
                            "name": "StringValue",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Else - Is number",
                    "dependsOnList": [
                        "Check if value is string "
                    ],
                    "isLast": 0,
                    "isTransactional": false,
                    "hasElse": true,
                    "actors": [
                        {
                            "name": "NumberValue",
                            "actorType": {
                                "parentType": "ToNumber",
                                "inputs": [],
                                "outputs": []
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Columns and values",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "PrimaryKeys",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Check if column is pk",
                    "dependsOnList": [
                        "Columns and values"
                    ],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "ColumnIsPK",
                            "condition": "result",
                            "actorType": {
                                "parentType": "EqualsIgnoreCase",
                                "inputs": [],
                                "outputs": []
                            }
                        }
                    ]
                },
                {
                    "name": "Else ",
                    "dependsOnList": [
                        "Columns and values"
                    ],
                    "isLast": 0,
                    "isTransactional": false,
                    "hasElse": true,
                    "actors": []
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Stage 1",
                    "dependsOnList": [
                        "Check if column is pk"
                    ],
                    "isLast": 1,
                    "actors": [
                        {
                            "name": "NotNull1",
                            "condition": "result",
                            "actorType": {
                                "parentType": "NotNull",
                                "inputs": [],
                                "outputs": []
                            }
                        },
                        {
                            "name": "SqlPksArr",
                            "actorType": {
                                "parentType": "ArrayBuilder",
                                "inputs": [],
                                "outputs": [
                                    {
                                        "name": "array",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "SqlPksMap",
                            "actorType": {
                                "parentType": "MapBuild",
                                "inputs": [],
                                "outputs": [
                                    {
                                        "name": "map",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "customer_id": {
                                                    "type": "string"
                                                },
                                                "address_id": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Stage 3",
                    "dependsOnList": [
                        "Else "
                    ],
                    "isLast": 1,
                    "isTransactional": false,
                    "actors": []
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Build before section map",
                    "dependsOnList": [],
                    "isLast": 1,
                    "actors": [
                        {
                            "name": "BeforeMap",
                            "actorType": {
                                "parentType": "MapBuild",
                                "inputs": [],
                                "outputs": [
                                    {
                                        "name": "map",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "customer_id ": {
                                                    "type": "integer"
                                                },
                                                "address_id ": {
                                                    "type": "integer"
                                                },
                                                "city ": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Column and value",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "ReplaceQuotesInValue",
                            "actorType": {
                                "parentType": "Mapper",
                                "inputs": [
                                    {
                                        "name": "script",
                                        "const": {
                                            "userCode": "if(value.stringValue != null){\r\n    Number(value.value);\r\n}else (value.value).replaceAll(\"''\",\"'\")",
                                            "script": "if (value.stringValue != null) {\n  Number(value.value);\n} else value.value.replaceAll(\"''\", \"'\");"
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "values",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "ColumnsNames",
                            "actorType": {
                                "parentType": "Mapper",
                                "inputs": [
                                    {
                                        "name": "script",
                                        "const": {
                                            "userCode": "(value.columnName).toUpperCase();",
                                            "script": "value.columnName.toUpperCase();"
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "values",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Loop columns",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "Value",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "Name",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "string"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Skip null values",
                    "dependsOnList": [
                        "Loop columns"
                    ],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "IfNull",
                            "condition": "result",
                            "actorType": {
                                "parentType": "EqualsIgnoreCase",
                                "inputs": [
                                    {
                                        "name": "b",
                                        "schema": {
                                            "type": "string"
                                        },
                                        "const": "nullFromBW"
                                    }
                                ],
                                "outputs": []
                            }
                        },
                        {
                            "name": "LoopSkip",
                            "actorType": {
                                "parentType": "LoopSkip",
                                "inputs": [],
                                "outputs": []
                            }
                        }
                    ]
                },
                {
                    "name": "Else  ",
                    "dependsOnList": [
                        "Loop columns"
                    ],
                    "isLast": 0,
                    "isTransactional": false,
                    "hasElse": true,
                    "actors": []
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Build after section map",
                    "dependsOnList": [],
                    "isLast": 1,
                    "actors": [
                        {
                            "name": "AfterMap",
                            "actorType": {
                                "parentType": "MapBuild",
                                "inputs": [],
                                "outputs": [
                                    {
                                        "name": "map",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "address_id": {
                                                    "type": "integer"
                                                },
                                                "customer_id": {
                                                    "type": "integer"
                                                },
                                                "city": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Results",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "SqlPrimaryKeys",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "MapMerge",
                            "actorType": {
                                "parentType": "MapMerge",
                                "inputs": [],
                                "outputs": [
                                    {
                                        "name": "map",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "customer_id": {
                                                    "type": "string"
                                                },
                                                "address_id": {
                                                    "type": "string"
                                                },
                                                "city": {
                                                    "type": "string"
                                                },
                                                "state": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        {
            "stages": [
                {
                    "name": "Output",
                    "dependsOnList": [],
                    "isLast": 0,
                    "actors": [
                        {
                            "name": "SqlPks",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "MessageAfter",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "address_id": {
                                                    "type": "integer"
                                                },
                                                "customer_id": {
                                                    "type": "integer"
                                                },
                                                "city": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        {
                            "name": "MessageBefore",
                            "actorType": {
                                "parentType": "Const",
                                "inputs": [
                                    {
                                        "name": "value",
                                        "const": null
                                    }
                                ],
                                "outputs": [
                                    {
                                        "name": "value",
                                        "schema": {
                                            "type": "object",
                                            "properties": {
                                                "customer_id": {
                                                    "type": "integer"
                                                },
                                                "address_id": {
                                                    "type": "integer"
                                                },
                                                "city": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "connections": [
        {
            "leftPort": {
                "actor": "StatementValues",
                "name": "value"
            },
            "rightPort": {
                "actor": "ReplaceQuotesInValue",
                "name": "values"
            }
        },
        {
            "leftPort": {
                "actor": "StatementCols",
                "name": "value"
            },
            "rightPort": {
                "actor": "ColumnsNames",
                "name": "values"
            }
        },
        {
            "leftPort": {
                "actor": "WhereClause",
                "name": "value"
            },
            "rightPort": {
                "actor": "SplitColsAndVals",
                "name": "string"
            },
            "iterate": "Iterate"
        },
        {
            "leftPort": {
                "actor": "SplitColsAndVals",
                "name": "strings"
            },
            "rightPort": {
                "actor": "Value ",
                "name": "arr"
            }
        },
        {
            "leftPort": {
                "actor": "SplitColsAndVals",
                "name": "strings"
            },
            "rightPort": {
                "actor": "Column",
                "name": "arr"
            }
        },
        {
            "leftPort": {
                "actor": "Value ",
                "name": "result"
            },
            "rightPort": {
                "actor": "NumberValue",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "Value ",
                "name": "result"
            },
            "rightPort": {
                "actor": "CheckIfString",
                "name": "input"
            }
        },
        {
            "leftPort": {
                "actor": "Value ",
                "name": "result"
            },
            "rightPort": {
                "actor": "NotNull1",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "Column",
                "name": "result"
            },
            "rightPort": {
                "actor": "BeforeMap",
                "name": "key"
            }
        },
        {
            "leftPort": {
                "actor": "Column",
                "name": "result"
            },
            "rightPort": {
                "actor": "SqlPksMap",
                "name": "key"
            }
        },
        {
            "leftPort": {
                "actor": "Column",
                "name": "result"
            },
            "rightPort": {
                "actor": "ColumnIsPK",
                "name": "b"
            }
        },
        {
            "leftPort": {
                "actor": "Column",
                "name": "result"
            },
            "rightPort": {
                "actor": "SqlPksArr",
                "name": "input"
            },
            "arrayPosition": 0
        },
        {
            "leftPort": {
                "actor": "CheckIfString",
                "name": "strings"
            },
            "rightPort": {
                "actor": "IsString",
                "name": "value"
            },
            "iterate": "First"
        },
        {
            "leftPort": {
                "actor": "CheckIfString",
                "name": "strings"
            },
            "rightPort": {
                "actor": "StringValue",
                "name": "value"
            },
            "iterate": "First"
        },
        {
            "leftPort": {
                "actor": "StringValue",
                "name": "value"
            },
            "rightPort": {
                "actor": "BeforeMap",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "StringValue",
                "name": "value"
            },
            "rightPort": {
                "actor": "SqlPksMap",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "NumberValue",
                "name": "number"
            },
            "rightPort": {
                "actor": "SqlPksMap",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "NumberValue",
                "name": "number"
            },
            "rightPort": {
                "actor": "BeforeMap",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "PrimaryKeys",
                "name": "value"
            },
            "rightPort": {
                "actor": "ColumnIsPK",
                "name": "a"
            },
            "iterate": "Iterate"
        },
        {
            "leftPort": {
                "actor": "SqlPksArr",
                "name": "array"
            },
            "rightPort": {
                "actor": "SqlPrimaryKeys",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "SqlPksMap",
                "name": "map"
            },
            "rightPort": {
                "actor": "MapMerge",
                "name": "maps"
            },
            "arrayPosition": 0
        },
        {
            "leftPort": {
                "actor": "BeforeMap",
                "name": "map"
            },
            "rightPort": {
                "actor": "MessageBefore",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "ReplaceQuotesInValue",
                "name": "values"
            },
            "rightPort": {
                "actor": "Value",
                "name": "value"
            },
            "iterate": "Iterate"
        },
        {
            "leftPort": {
                "actor": "ColumnsNames",
                "name": "values"
            },
            "rightPort": {
                "actor": "Name",
                "name": "value"
            },
            "iterate": "Iterate"
        },
        {
            "leftPort": {
                "actor": "Value",
                "name": "value"
            },
            "rightPort": {
                "actor": "IfNull",
                "name": "a"
            }
        },
        {
            "leftPort": {
                "actor": "Value",
                "name": "value"
            },
            "rightPort": {
                "actor": "AfterMap",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "Name",
                "name": "value"
            },
            "rightPort": {
                "actor": "AfterMap",
                "name": "key"
            }
        },
        {
            "leftPort": {
                "actor": "AfterMap",
                "name": "map"
            },
            "rightPort": {
                "actor": "MapMerge",
                "name": "maps"
            },
            "arrayPosition": 1
        },
        {
            "leftPort": {
                "actor": "SqlPrimaryKeys",
                "name": "value"
            },
            "rightPort": {
                "actor": "SqlPks",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "MapMerge",
                "name": "map"
            },
            "rightPort": {
                "actor": "MessageAfter",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "flowArgs",
                "name": "statementValues"
            },
            "rightPort": {
                "actor": "StatementValues",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "flowArgs",
                "name": "statementColumns"
            },
            "rightPort": {
                "actor": "StatementCols",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "flowArgs",
                "name": "whereClause"
            },
            "rightPort": {
                "actor": "WhereClause",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "flowArgs",
                "name": "primary_keys"
            },
            "rightPort": {
                "actor": "PrimaryKeys",
                "name": "value"
            }
        },
        {
            "leftPort": {
                "actor": "SqlPks",
                "name": "value"
            },
            "rightPort": {
                "actor": "flowArgs",
                "name": "sqlPrimaryKeys"
            }
        },
        {
            "leftPort": {
                "actor": "MessageAfter",
                "name": "value"
            },
            "rightPort": {
                "actor": "flowArgs",
                "name": "messageAfter"
            }
        },
        {
            "leftPort": {
                "actor": "MessageBefore",
                "name": "value"
            },
            "rightPort": {
                "actor": "flowArgs",
                "name": "messageBefore"
            }
        }
    ]
}