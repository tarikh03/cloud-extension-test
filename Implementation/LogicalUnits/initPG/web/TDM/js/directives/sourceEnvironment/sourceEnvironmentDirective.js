function sourceEnvironmentDirective(){return{restrict:"E",templateUrl:"views/soruceEnvrionments/sourceEnvironment.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,toastr,SweetAlert,$timeout,AuthService,DTColumnBuilder,DTOptionsBuilder,$q,$compile,$uibModal,$http){this._scope=$scope;var sourceEnvironmentCtrl=this;sourceEnvironmentCtrl.environmentData=$scope.content.environmentData,sourceEnvironmentCtrl.pageDisplay="environment",$scope.userRole=AuthService.getRole(),sourceEnvironmentCtrl.showEnvironment=!0,sourceEnvironmentCtrl.disableOwnersChange="Inactive"==sourceEnvironmentCtrl.environmentData.environment_status||!AuthService.authorizedToEdit(0),sourceEnvironmentCtrl.tabClicked=function(newTab){return sourceEnvironmentCtrl.roleForm&&sourceEnvironmentCtrl.roleForm.$dirty&&sourceEnvironmentCtrl.askToSaveChanges("Role",newTab),sourceEnvironmentCtrl.activityPanel="newRole",newTab},sourceEnvironmentCtrl.askToSaveChanges=function(form,newTab){swal({title:"You have unsaved changes.",text:"Do you want to save changes before close?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){if(isConfirm)swal("Discard!","Your changes have not been saved!","error");else{switch(form){case"Role":sourceEnvironmentCtrl.saveRoleChanges()}swal("Saved!","Your changes have been saved.","success")}sourceEnvironmentCtrl.activityPanel="empty",sourceEnvironmentCtrl.newTab=newTab}))},sourceEnvironmentCtrl.getSummaryData=function(){sourceEnvironmentCtrl.activityPanel="empty"},sourceEnvironmentCtrl.saveChanges=function(){TDMService.putGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id,sourceEnvironmentCtrl.environmentData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"Updated Successfully"),$scope.content.openEnvironments()):toastr.error("Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to Update : "+response.message)}))};var deleteEnvironmentTemp=function(){TDMService.deleteGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"deleted Successfully"),$timeout((function(){$scope.content.openEnvironments()}),400)):toastr.error("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to delete")}))};sourceEnvironmentCtrl.deleteEnvironment=function(){1==sourceEnvironmentCtrl.tasksCount?SweetAlert.swal({title:"Source Environment will be deleted from all releated tasks. Are you sure?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||deleteEnvironmentTemp()})):deleteEnvironmentTemp()},BreadCrumbsService.breadCrumbChange(1),BreadCrumbsService.push({environmentID:sourceEnvironmentCtrl.environmentData.source_environment_name},"SOURCE_ENVIRONMENT_BREADCRUMB",(function(){$scope.content.openEnvironment(sourceEnvironmentCtrl.environmentData)})),sourceEnvironmentCtrl.openRolesManagement=function(){$scope.content.openRoles(sourceEnvironmentCtrl.environmentData)},sourceEnvironmentCtrl.loadingTableRoles=!0,TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/roles").then((function(response){if("SUCCESS"==response.errorCode){sourceEnvironmentCtrl.roles=_.sortBy(response.result,(function(value){return new Date(value.role_creation_date)})),sourceEnvironmentCtrl.roles.reverse(),sourceEnvironmentCtrl.dtInstanceRoles={},sourceEnvironmentCtrl.dtColumnsRoles=[],sourceEnvironmentCtrl.dtColumnDefsRoles=[],sourceEnvironmentCtrl.headersRoles=[{column:"role_name",name:"Name",clickAble:!0},{column:"role_description",name:"Description",clickAble:!1},{column:"role_creation_date",name:"Creation Date",clickAble:!1,type:"date"},{column:"role_created_by",name:"Created By",clickAble:!1},{column:"role_last_updated_date",name:"Last Update Date",clickAble:!1,type:"date"},{column:"role_last_updated_by",name:"Updated By",clickAble:!1},{column:"role_status",name:"Status",clickAble:!1}];for(var clickAbleColumn=function(data,type,full,meta){return'<a ng-click="sourceEnvironmentCtrl.openRole('+meta.row+')">'+data+"</a>"},changeToLocalDate=function(data,type,full,meta){return moment(data).format("D MMM YYYY, HH:mm")},i=0;i<sourceEnvironmentCtrl.headersRoles.length;i++)1==sourceEnvironmentCtrl.headersRoles[i].clickAble?sourceEnvironmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(sourceEnvironmentCtrl.headersRoles[i].column).withTitle(sourceEnvironmentCtrl.headersRoles[i].name).renderWith(clickAbleColumn)):"date"==sourceEnvironmentCtrl.headersRoles[i].type?sourceEnvironmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(sourceEnvironmentCtrl.headersRoles[i].column).withTitle(sourceEnvironmentCtrl.headersRoles[i].name).renderWith(changeToLocalDate)):sourceEnvironmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(sourceEnvironmentCtrl.headersRoles[i].column).withTitle(sourceEnvironmentCtrl.headersRoles[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(sourceEnvironmentCtrl.roles),deferred.promise};sourceEnvironmentCtrl.dtOptionsRoles=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("aaSorting",[6,"asc"]).withOption("lengthChange",!1).withOption("paging",!1).withOption("searching",!1).withOption("info",!1).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),sourceEnvironmentCtrl.dtInstanceCallbackRoles=function(dtInstance){angular.isFunction(sourceEnvironmentCtrl.dtInstanceRoles)?sourceEnvironmentCtrl.dtInstanceRoles(dtInstance):angular.isDefined(sourceEnvironmentCtrl.dtInstanceRoles)&&(sourceEnvironmentCtrl.dtInstanceRoles=dtInstance)},null!=sourceEnvironmentCtrl.dtInstanceRoles.changeData&&sourceEnvironmentCtrl.dtInstanceRoles.changeData(getTableData()),sourceEnvironmentCtrl.loadingTableRoles=!1}})),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/users").then((function(response){"SUCCESS"==response.errorCode?(sourceEnvironmentCtrl.allTesters=response.result,sourceEnvironmentCtrl.openRole(0)):(sourceEnvironmentCtrl.hideUsersInput=!0,toastr.error("Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to get All Testers : "+response.message))})),sourceEnvironmentCtrl.openRole=function(index){sourceEnvironmentCtrl.roleData=angular.copy(sourceEnvironmentCtrl.roles[index]),sourceEnvironmentCtrl.roleData.indexInRoles=index,sourceEnvironmentCtrl.roleData.role_type="ALL"==sourceEnvironmentCtrl.roleData.role_type,sourceEnvironmentCtrl.disableChangeRole=sourceEnvironmentCtrl.disableChange||"Inactive"==sourceEnvironmentCtrl.roleData.role_status||!AuthService.authorizedToEdit(1),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/role/"+sourceEnvironmentCtrl.roleData.role_id+"/users").then((function(response){"SUCCESS"==response.errorCode?(sourceEnvironmentCtrl.testers=response.result,sourceEnvironmentCtrl.allTesters||(sourceEnvironmentCtrl.allTesters=[]),sourceEnvironmentCtrl.allTestersRole=sourceEnvironmentCtrl.allTesters.concat(sourceEnvironmentCtrl.testers),sourceEnvironmentCtrl.allTestersRole.unshift({user_id:-1,username:"ALL"})):(sourceEnvironmentCtrl.hideUsersInput=!0,toastr.error("Role # "+sourceEnvironmentCtrl.roleData.role_name,"failed to get Role Users : "+response.message))})),sourceEnvironmentCtrl.activityPanel="empty",$timeout((function(){sourceEnvironmentCtrl.activityPanel="Role"}),200)},sourceEnvironmentCtrl.deleteRole=function(){TDMService.deleteGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name+"/role/"+sourceEnvironmentCtrl.roleData.role_id+"/rolename/"+sourceEnvironmentCtrl.roleData.role_name).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role # "+sourceEnvironmentCtrl.roleData.role_name,"deleted Successfully"),sourceEnvironmentCtrl.roleData.role_status="Inactive",sourceEnvironmentCtrl.roles[sourceEnvironmentCtrl.roleData.indexInRoles].role_status="Inactive",sourceEnvironmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/testers").then((function(response){"SUCCESS"==response.errorCode?sourceEnvironmentCtrl.allTesters=response.result:(sourceEnvironmentCtrl.hideUsersInput=!0,toastr.error("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to get All Testers : "+response.message))})),sourceEnvironmentCtrl.getSummaryData()):toastr.error("Role # "+sourceEnvironmentCtrl.roleData.role_name,"failed to delete")}))},sourceEnvironmentCtrl.saveRoleChanges=function(){TDMService.postGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name+"/role/"+sourceEnvironmentCtrl.roleData.role_id+"/rolename/"+sourceEnvironmentCtrl.roleData.role_name+"/users",sourceEnvironmentCtrl.testers).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role Users # "+sourceEnvironmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/testers").then((function(response){"SUCCESS"==response.errorCode?sourceEnvironmentCtrl.allTesters=response.result:(sourceEnvironmentCtrl.hideUsersInput=!0,toastr.error("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to get All Testers : "+response.message))})),sourceEnvironmentCtrl.getSummaryData()):toastr.error("Role Users # "+sourceEnvironmentCtrl.roleData.role_name,"failed to Update : "+response.message)})),sourceEnvironmentCtrl.testers.length>0?sourceEnvironmentCtrl.roleData.role_type="SPECIFIC":sourceEnvironmentCtrl.roleData.role_type?sourceEnvironmentCtrl.roleData.role_type="ALL":sourceEnvironmentCtrl.roleData.role_type="SPECIFIC",TDMService.putGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name+"/role/"+sourceEnvironmentCtrl.roleData.role_id,sourceEnvironmentCtrl.roleData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role # "+sourceEnvironmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/roles").then((function(response){"SUCCESS"==response.errorCode&&(sourceEnvironmentCtrl.roles=response.result,sourceEnvironmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0))}))):toastr.error("Role # "+sourceEnvironmentCtrl.roleData.role_name,"failed to Update : "+response.message)}))},sourceEnvironmentCtrl.openNewRole=function(){deleteEnvironmentTemp(),sourceEnvironmentCtrl.roleData={allowed_creation_of_synthetic_data:!1,allowed_delete_before_load:!1,allowed_random_entity_selection:!1,allowed_request_of_fresh_data:!1,allowed_task_scheduling:!1,allowed_replace_sequences:!1,allowed_refresh_reference_data:!1,allowed_number_of_entities_to_copy:0,role_description:"",role_name:"",role_type:!1},sourceEnvironmentCtrl.activityPanel="newRole",sourceEnvironmentCtrl.testers=[],sourceEnvironmentCtrl.allTesters||(sourceEnvironmentCtrl.allTesters=[])},sourceEnvironmentCtrl.addNewRole=function(){if(_.find(sourceEnvironmentCtrl.roles,{role_name:sourceEnvironmentCtrl.roleData.role_name,role_status:"Active"}))return toastr.error("Role # "+sourceEnvironmentCtrl.roleData.role_name+" Already Exists");TDMService.postGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name+"/role",sourceEnvironmentCtrl.roleData).then((function(response){"SUCCESS"==response.errorCode?(TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/roles").then((function(response){"SUCCESS"==response.errorCode&&(sourceEnvironmentCtrl.roles=response.result,sourceEnvironmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0))})),toastr.success("Role # "+sourceEnvironmentCtrl.roleData.role_name,"Created Successfully"),sourceEnvironmentCtrl.getSummaryData(),TDMService.postGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/envname/"+sourceEnvironmentCtrl.environmentData.source_environment_name+"/role/"+response.result.id+"/rolename/"+sourceEnvironmentCtrl.roleData.role_name+"/users",sourceEnvironmentCtrl.testers).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role Users # "+sourceEnvironmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getGenericAPI("sourceEnvironment/"+sourceEnvironmentCtrl.environmentData.source_environment_id+"/testers").then((function(response){"SUCCESS"==response.errorCode?sourceEnvironmentCtrl.allTesters=response.result:(sourceEnvironmentCtrl.hideUsersInput=!0,toastr.error("Source Environment # "+sourceEnvironmentCtrl.environmentData.source_environment_name,"failed to get All Testers : "+response.message))}))):toastr.error("Role Users # "+sourceEnvironmentCtrl.roleData.role_name,"failed to Update : "+response.message)}))):toastr.error("Role # "+sourceEnvironmentCtrl.roleData.role_name,"Unable to Create : "+response.message)}))}},controllerAs:"sourceEnvironmentCtrl"}}angular.module("TDM-FE").directive("sourceEnvironmentDirective",sourceEnvironmentDirective);